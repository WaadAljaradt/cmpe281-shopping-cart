April 29:
1. Using page reload in place of ajax for cart addition and removal.
2. Added methods Post, Get, and Delete for cart
3. Updated code in cart.ejs and cart.js file
4. Cart layout update using botstrap.

April 27:
1. Created cart.ejs - template for rendering users cart info
2. Created cart.js - contains js code related to cart.ejs
3. Using ajax delete to remove item from cart
4. Ajax itself sends session cookie with request, no need to add any session data manually
5. If ajax call made to different domain, results in cross domain problem. because browsers restrics cookie sharing to
	only single domain that is related to that cookie

April 24:
1. Testing login module
2. Problem with ejs template solved, value not being substituted
3. EJS requires <%= %> tags for value substitution, not <% %>
4. Login module test cases
	a. Negative test case 1: username not found
	b. Negative test case 2: username found but password wrong
	c. Negative test case 3: email not valid
	d. Negative test case 4: password not entered
	e. Negative test case 5: email not enterd
	c. Positive test case 1: username and password matches

April 23:
1. Login request to mongo server
2. Using 'request' module to do post request
3. Some changes to UI required for post request
4. Integrated changes made by waad

April 20:
1. Added code for session and authentication
2. Added code for cart, catalog, welcome page
3. More need to be done in these files, see TODO tags
4. authenticate.js and passport-init.js contains code for authentication
5. Basic app structure is ready, need to add database rest calls to read and write data
6. Learned usage of session, passport, mangoose, salt/hash.
7. More need to be explored on express middleware, sequence of middleware calls matters too much.

April 19:
1. Added code for welcome page
2. Explored usage of passport and express-session modules
3. Authentication and session management to be done by express-session and passport
4. Angular code will not be usefull as now we are using node app on frontend
5. Frontend pages to be implemented in EJS

April 16:
1. Team meeting and final app architecture. As per Jaya and professors meeting heroku should have node app with angular code.
	All Rest calls and database to be hosted on aws infra.
2. Frontend app skeleton in node js using express created with sample files. Defines initial app structure
3. Git branch 'frontend' https://github.com/jayakirtani/cmpe281-shopping-cart.git created. This branch is specifically
	for frontend heroku app and will be used by me and Waad.
4. Added .gitignore file, this file mentions patterns of file/folder names to be ignored when pushing local artifacts to git
	included node_modules, build files, test artifacts etc.
5. Now creating node app, angular app on heroku frontend
6. Creating database and REST interface to databases on AWS
7. The node modules like express-session for session management and passport for authentication is to be used
8. Application logo, background image and name decided in team meeting
9. Color scheme to be used is grey and orange.
10. Mongo to host product catalog, order history, user profiles and Riak to host cart.

April 12:
1. Application logo, background image, name
2. Git should be organized into sensible folders - frontend, backend, docs, ..
3. Lucid charts changed free account services, using gliffy now to draw layouts
4. Need to decide on UI layout, colors, fonts etc.

April 9:
1. Team meeting
2. More concrete discussion on application architecture
3. Created best practice guidelines for team
4. Can try to use tools like lint, static code analyser, docs, unit test in project
5. Created macro level application architecture diagram, confirms everybody is on same page
6. Going for a MVP version first, if time permits team will implement more features. First version features are
	a. Browse catalog
	b. Add to cart
	c. Checkout
	d. User login and signup
	e. NO guest checkout and browse catalog for now
7. As per discussion with Waad regarding frontend and other team members about database schema, application can have following front end pages
	a. Welcome cum login-signup page
	b. User account page with order history and update profile
	c. Catalog page - shows all products on one page
	d. Checkout page
8. Created wireframe diagram for welcome page
9. Also created this journal, seems trivial but important :)

April 8:
1. Explore Angular
	a. Create sample app with angular
	b. Beginner tutorials and videos
2. Formed more clear understanding of app architecture.
3. Can have seperate frontend and backend. Like two different node apps


April 6:
1. Explore Heroku
	a. Paas system
	b. Heroku CLI toolbelt to manage and scale deployments
	c. Create sample node js app on heroku and play with heroku cli
2. Explore bootstrap
	a. Create sample page and explore options to theme

April 5:
1. Start up meeting
2. Seperation of tasks on big level
3. Working with frontend
4. Decided to use MEAN stack
5. Frontend with Angular and bootstrap on Heroku
